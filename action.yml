name: publish-pr-artifact
description: Compute artifact name, upload it, fetch artifact id and update PR body
inputs:
  github-token:
    required: true
  preview-number:
    required: true
    description: Preview number
  artifact-path:
    required: false
    default: out
  release-marker:
    required: false
    default: "ðŸŽ¯ PR Release ðŸŽ¯"
    description: Marker im PR-Body
runs:
  using: composite
  steps:
    - name: Compute artifact name
      id: compute-name
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const prNumber = context.payload.pull_request.number;
          const previewNumber = '${{ inputs.preview-number }}';
          const name = `PR-${prNumber}-Preview-${previewNumber}`;
          core.setOutput('artifact-name', name);
          console.log(`Artifact name: ${name}`);
    - name: Upload build output
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.compute-name.outputs.artifact-name }}
        path: ${{ inputs.artifact-path }}
    - name: Get artifact id
      id: get-id
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const { owner, repo } = context.repo;
          const run_id = context.runId;
          const targetName = '${{ steps.compute-name.outputs.artifact-name }}';
          async function findArtifact(retries = 5) {
            for (let i = 0; i < retries; i++) {
              const res = await github.rest.actions.listWorkflowRunArtifacts({ owner, repo, run_id, per_page: 100 });
              const artifact = res.data.artifacts.find(a => a.name === targetName);
              if (artifact) return artifact;
              await new Promise(r => setTimeout(r, 3000));
            }
            return null;
          }
          const artifact = await findArtifact();
          if (!artifact) {
            core.setFailed(`Artifact '${targetName}' not found.`);
          } else {
            core.setOutput('artifact-id', artifact.id.toString());
            console.log(`Found artifact ID: ${artifact.id}`);
          }
    - name: Update PR body
      if: ${{ success() }}
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const { owner, repo } = context.repo;
          const number = context.payload.pull_request.number;
          const runId = context.runId;
          const previewNumber = '${{ inputs.preview-number }}';
          const artifactId = '${{ steps.get-id.outputs.artifact-id }}';
          const artifactName = '${{ steps.compute-name.outputs.artifact-name }}';
          const releaseMarker = '${{ inputs.release-marker }}';

          let artifactLink = `https://github.com/${owner}/${repo}/actions/runs/${runId}`;
            if (artifactId) {
              artifactLink = `https://github.com/${owner}/${repo}/actions/runs/${runId}/artifacts/${artifactId}`;
            }

          const newPreviewLine = `ðŸ‘‰ [Preview ${previewNumber}](${artifactLink})`;

          const pr = await github.rest.pulls.get({ owner, repo, pull_number: number });
          let prBody = pr.data.body || '';

          const releaseMarkerIndex = prBody.indexOf(releaseMarker);

          if (releaseMarkerIndex === -1) {
            prBody += `\n\n---\n\n${releaseMarker}\n${newPreviewLine}`;
          } else {
            // Find end of the marker line
            let afterMarkerIndex = prBody.indexOf('\n', releaseMarkerIndex);
            if (afterMarkerIndex === -1) {
              // Marker is at end of body
              prBody += `\n${newPreviewLine}`;
            } else {
              afterMarkerIndex += 1; // Position directly after newline
              const tail = prBody.substring(afterMarkerIndex);
              const lines = tail.split('\n');
              const previewLinePattern = /^\s*(~~)?ðŸ‘‰ .*Preview \d+/;
              let lastPreviewIdx = -1;

              for (let i = 0; i < lines.length; i++) {
                if (previewLinePattern.test(lines[i])) {
                  lastPreviewIdx = i;
                }
              }

              if (lastPreviewIdx === -1) {
                // No previews: insert directly after marker
                prBody = prBody.slice(0, afterMarkerIndex) + newPreviewLine + '\n' + tail;
              } else {
                const before = lines.slice(0, lastPreviewIdx + 1).join('\n');
                const after = lines.slice(lastPreviewIdx + 1).join('\n');
                prBody = prBody.slice(0, afterMarkerIndex) +
                       before + '\n' +
                       newPreviewLine + '\n' +
                       after;
              }
            }
          }

          await github.rest.pulls.update({ owner, repo, pull_number: number, body: prBody });
          console.log('PR body updated with preview link.');